{"version":3,"sources":["components/WinBox/WinBox.module.css","components/ButtonsBox/ButtonsBox.module.css","components/Button/Button.module.css","components/PlayBox/PlayBox.module.css","components/Button/Button.js","components/ButtonsBox/ButtonsBox.js","helpers/copyArray.helper.js","helpers/generateRenderData.helper.js","helpers/isGameFinished.helper.js","services/fetchData.js","components/Game/Game.js","components/PlayBox/PlayBox.js","components/WinBox/WinBox.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Button","style","backColor","onClick","type","className","styles","playBtn","backgroundColor","ButtonsBox","colorsList","gameBox","map","colors","i","btnBox","color","j","copyArray","arr","value","generateRenderData","data","maxCount","length","push","isGameFinished","finish","status","forEach","uniqueObj","Set","add","size","a","fetch","response","json","fetchData","Game","addStep","handleFinish","useState","setColors","setMaxCount","renderColors","setRenderColors","selectedColor","setSelectedColor","arrIndex","setArrIndex","useEffect","then","genColors","catch","error","Error","colorsClone","index","clickedColorsArray","clickedColor","pop","PlayBox","steps","playSteps","WinBox","winBox","winHead","winBody","winBoxBtn","App","setSteps","isFinished","setIsFinished","handlePlayAgain","useCallback","handleStep","prevStep","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","querySelector"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,QAAU,wBAAwB,QAAU,wBAAwB,UAAY,4B,kBCAlID,EAAOC,QAAU,CAAC,QAAU,4BAA4B,OAAS,6B,mBCAjED,EAAOC,QAAU,CAAC,QAAU,0B,iBCA5BD,EAAOC,QAAU,CAAC,UAAY,6B,0KCGf,SAASC,EAAT,GAAgD,IAA9BC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,UAAWC,EAAW,EAAXA,QACjD,OACE,uBACEC,KAAK,SACLC,UAAWC,IAAOC,QAClBN,MAAK,2BAAOA,GAAP,IAAcO,gBAAiBN,IACpCC,QAASA,I,oBCJA,SAASM,EAAT,GAA8C,IAAxBC,EAAuB,EAAvBA,WAAYP,EAAW,EAAXA,QAC/C,OACE,qBAAKE,UAAWC,IAAOK,QAAvB,SACGD,EACGA,EAAWE,KAAI,SAACC,EAAQC,GAAT,OACb,qBAAaT,UAAWC,IAAOS,OAAQZ,QAAS,kBAAMA,EAAQW,IAA9D,SACGD,EAAOD,KAAI,SAACI,EAAOC,GAAR,OACV,cAACjB,EAAD,CAAgBE,UAAWc,GAAdC,OAFPH,MAMZ,O,YCbKI,EAJG,SAACC,GACjB,OAAOA,EAAIP,KAAI,SAACQ,GAAD,mBAAeA,OCejBC,EAdY,SAACC,EAAMC,GAGhC,OAFmBL,EAAUI,GAEXV,KAAI,SAACC,GACrB,GAAIA,EAAOW,OAASD,EAClB,KAAOV,EAAOW,SAAWD,GACvBV,EAAOY,KAAK,IAIhB,OAAOZ,MCcIa,EA1BQ,SAAChB,EAAYa,EAAUI,GAC5C,IAAIC,GAAS,EAsBb,OApBAlB,EAAWmB,SAAQ,SAAChB,GAClB,GAAIA,EAAOW,OAAQ,CACjB,GAAIX,EAAOW,SAAWD,EAAU,CAC9B,IAAMO,EAAY,IAAIC,IAItB,GAFAlB,EAAOgB,SAAQ,SAACb,GAAD,OAAWc,EAAUE,IAAIhB,MAEjB,IAAnBc,EAAUG,KACZ,OAIJL,GAAS,MAITA,GACFD,IAGKC,G,oECvBT,8BAAAM,EAAA,sEACyBC,MAAM,aAD/B,cACQC,EADR,gBAGqBA,EAASC,OAH9B,cAGQf,EAHR,yBAKSA,GALT,4C,sBAQegB,M,2CCAA,SAASC,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,aAAgB,EAC1BC,mBAAS,IADiB,mBAC/C7B,EAD+C,KACvC8B,EADuC,OAEtBD,mBAAS,MAFa,mBAE/CnB,EAF+C,KAErCqB,EAFqC,OAGdF,mBAAS,IAHK,mBAG/CG,EAH+C,KAGjCC,EAHiC,OAIZJ,mBAAS,IAJG,mBAI/CK,EAJ+C,KAIhCC,EAJgC,OAKtBN,mBAAS,MALa,mBAK/CO,EAL+C,KAKrCC,EALqC,KAOtDC,qBAAU,WACMb,IAGXc,MAAK,SAAC9B,GACLqB,EAAUrB,EAAKT,QAEf+B,EAAYtB,EAAKC,UAEjB,IAAM8B,EAAYhC,EAAmBC,EAAKT,OAAQU,GAElDuB,EAAgBO,MAEjBC,OAAM,SAACC,GACN,MAAM,IAAIC,MAAJ,8BAET,CAACjC,IAiEJ,OACE,qCACE,cAACvB,EAAD,CAAQE,UAAW6C,EAAe5C,QAtBnB,WACjB,GAAiB,OAAb8C,EAAmB,CACrB,IAAMQ,EAAcvC,EAAUL,GAEb4C,EAAYR,GAEpBxB,KAAKsB,GAEdJ,EAAUc,GAEV,IAAMJ,EAAYhC,EAAmBoC,EAAalC,GAElDuB,EAAgBO,GAEhBH,EAAY,MAEZF,EAAiB,QAOjB,cAACvC,EAAD,CAAYC,WAAYmC,EAAc1C,QAlEtB,SAACuD,GACnB,IAAMD,EAAcvC,EAAUL,GACxB8C,EAAqBF,EAAYC,GACjCE,EAAeD,EAAmBA,EAAmBnC,OAAS,GAEpE,IAAKuB,EAAe,CAClBY,EAAmBE,MAEnBb,EAAiBY,GAEjBjB,EAAUc,GAEVP,EAAYQ,GAEZ,IAAML,EAAYhC,EAAmBoC,EAAalC,GAMlD,OAJAuB,EAAgBO,QAEhBb,IAKF,GACEmB,EAAmBnC,OAASD,KAC1BqC,GAAgBb,IAAkBa,GACpC,CACAD,EAAmBlC,KAAKsB,GAExBC,EAAiB,IAEjBL,EAAUc,GAEV,IAAMJ,EAAYhC,EAAmBoC,EAAalC,GAElDuB,EAAgBO,GAEhBb,IAGFd,EAAe+B,EAAalC,EAAUkB,S,qBCpE3B,SAASqB,EAAT,GAA8C,IAA3BC,EAA0B,EAA1BA,MAAOvB,EAAmB,EAAnBA,QAASb,EAAU,EAAVA,OAChD,OACE,qCACE,sBAAKtB,UAAWC,IAAO0D,UAAvB,oBAA0CD,KAC1C,cAACxB,EAAD,CAAMC,QAASA,EAASC,aAAcd,O,oBCL7B,SAASsC,EAAT,GAAqC,IAAnBF,EAAkB,EAAlBA,MAAO5D,EAAW,EAAXA,QACtC,OACE,0BAASE,UAAWC,IAAO4D,OAA3B,UACE,oBAAI7D,UAAWC,IAAO6D,QAAtB,oBACA,oBAAG9D,UAAWC,IAAO8D,QAArB,0BAA4CL,KAC5C,wBAAQ1D,UAAWC,IAAO+D,UAAWlE,QAASA,EAA9C,2BCwBSmE,MA7Bf,WAAgB,IAAD,EACa5B,mBAAS,GADtB,mBACNqB,EADM,KACCQ,EADD,OAEuB7B,oBAAS,GAFhC,mBAEN8B,EAFM,KAEMC,EAFN,KAIPC,EAAkBC,uBAAY,WAClCF,GAAc,GAEdF,EAAS,KACR,IAEG9B,EAAekC,uBAAY,WAC/BF,GAAc,KACb,IAEGG,EAAaD,uBAAY,WAC7BJ,GAAS,SAACM,GAAD,OAAcA,EAAW,OACjC,IAEH,OACE,qBAAKxE,UAAU,MAAf,SACGmE,EACC,cAACP,EAAD,CAAQF,MAAOA,EAAO5D,QAASuE,IAE/B,cAACZ,EAAD,CAASC,MAAOA,EAAOvB,QAASoC,EAAYjD,OAAQc,OCf7CqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,cAAc,UAGzBZ,M","file":"static/js/main.ee975af1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"winBox\":\"WinBox_winBox__1oX_2\",\"winHead\":\"WinBox_winHead__3LGcB\",\"winBody\":\"WinBox_winBody__3oDl5\",\"winBoxBtn\":\"WinBox_winBoxBtn__3os6A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameBox\":\"ButtonsBox_gameBox__g9QeO\",\"btnBox\":\"ButtonsBox_btnBox__ivRZo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playBtn\":\"Button_playBtn__37kHo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"playSteps\":\"PlayBox_playSteps__TRCWQ\"};","import React from \"react\";\nimport styles from \"./Button.module.css\";\nimport PropTypes from \"prop-types\";\n\nexport default function Button({ style, backColor, onClick }) {\n  return (\n    <input\n      type=\"button\"\n      className={styles.playBtn}\n      style={{ ...style, backgroundColor: backColor }}\n      onClick={onClick}\n    />\n  );\n}\n\nButton.propTypes = {\n  style: PropTypes.object,\n  backColor: PropTypes.string,\n  onClick: PropTypes.func,\n};\n","import React from \"react\";\nimport styles from \"./ButtonsBox.module.css\";\nimport PropTypes from \"prop-types\";\n\nimport Button from \"../Button/Button\";\n\nexport default function ButtonsBox({ colorsList, onClick }) {\n  return (\n    <div className={styles.gameBox}>\n      {colorsList\n        ? colorsList.map((colors, i) => (\n            <div key={i} className={styles.btnBox} onClick={() => onClick(i)}>\n              {colors.map((color, j) => (\n                <Button key={j} backColor={color} />\n              ))}\n            </div>\n          ))\n        : null}\n    </div>\n  );\n}\n\nButtonsBox.propTypes = {\n  colorsList: PropTypes.array,\n  onClick: PropTypes.func,\n};\n","const copyArray = (arr) => {\n  return arr.map((value) => [...value]);\n};\n\nexport default copyArray;\n","import copyArray from \"./copyArray.helper\";\n\nconst generateRenderData = (data, maxCount) => {\n  const clonedData = copyArray(data);\n\n  return clonedData.map((colors) => {\n    if (colors.length < maxCount) {\n      while (colors.length !== maxCount) {\n        colors.push(\"\");\n      }\n    }\n\n    return colors;\n  });\n};\n\nexport default generateRenderData;\n","const isGameFinished = (colorsList, maxCount, finish) => {\n  let status = true;\n\n  colorsList.forEach((colors) => {\n    if (colors.length) {\n      if (colors.length === maxCount) {\n        const uniqueObj = new Set();\n\n        colors.forEach((color) => uniqueObj.add(color));\n\n        if (uniqueObj.size === 1) {\n          return;\n        }\n      }\n\n      status = false;\n    }\n  });\n\n  if (status) {\n    finish();\n  }\n\n  return status;\n};\n\nexport default isGameFinished;\n","async function fetchData() {\n  const response = await fetch(\"data.json\");\n\n  const data = await response.json();\n\n  return data;\n}\n\nexport default fetchData;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, ButtonsBox } from \"../\";\nimport copyArray from \"../../helpers/copyArray.helper\";\nimport generateRenderData from \"../../helpers/generateRenderData.helper\";\nimport isGameFinished from \"../../helpers/isGameFinished.helper\";\nimport fetchData from \"../../services/fetchData\";\n\nexport default function Game({ addStep, handleFinish }) {\n  const [colors, setColors] = useState([]);\n  const [maxCount, setMaxCount] = useState(null);\n  const [renderColors, setRenderColors] = useState([]);\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [arrIndex, setArrIndex] = useState(null);\n\n  useEffect(() => {\n    const datas = fetchData();\n\n    datas\n      .then((data) => {\n        setColors(data.colors);\n\n        setMaxCount(data.maxCount);\n\n        const genColors = generateRenderData(data.colors, maxCount);\n\n        setRenderColors(genColors);\n      })\n      .catch((error) => {\n        throw new Error(`Something went wrong!`);\n      });\n  }, [maxCount]);\n\n  const handleClick = (index) => {\n    const colorsClone = copyArray(colors);\n    const clickedColorsArray = colorsClone[index];\n    const clickedColor = clickedColorsArray[clickedColorsArray.length - 1];\n\n    if (!selectedColor) {\n      clickedColorsArray.pop();\n\n      setSelectedColor(clickedColor);\n\n      setColors(colorsClone);\n\n      setArrIndex(index);\n\n      const genColors = generateRenderData(colorsClone, maxCount);\n\n      setRenderColors(genColors);\n\n      addStep();\n\n      return;\n    }\n\n    if (\n      clickedColorsArray.length < maxCount &&\n      (!clickedColor || selectedColor === clickedColor)\n    ) {\n      clickedColorsArray.push(selectedColor);\n\n      setSelectedColor(\"\");\n\n      setColors(colorsClone);\n\n      const genColors = generateRenderData(colorsClone, maxCount);\n\n      setRenderColors(genColors);\n\n      addStep();\n    }\n\n    isGameFinished(colorsClone, maxCount, handleFinish);\n  };\n\n  const handleUndo = () => {\n    if (arrIndex !== null) {\n      const colorsClone = copyArray(colors);\n\n      const preArray = colorsClone[arrIndex];\n\n      preArray.push(selectedColor);\n\n      setColors(colorsClone);\n\n      const genColors = generateRenderData(colorsClone, maxCount);\n\n      setRenderColors(genColors);\n\n      setArrIndex(null);\n\n      setSelectedColor(\"\");\n    }\n  };\n\n  return (\n    <>\n      <Button backColor={selectedColor} onClick={handleUndo} />\n      <ButtonsBox colorsList={renderColors} onClick={handleClick} />\n    </>\n  );\n}\n\nGame.propTypes = {\n  addStep: PropTypes.func,\n  handleFinish: PropTypes.func,\n};\n","import React from \"react\";\nimport styles from \"./PlayBox.module.css\";\nimport PropTypes from \"prop-types\";\nimport Game from \"../Game/Game\";\n\nexport default function PlayBox({ steps, addStep, finish }) {\n  return (\n    <>\n      <div className={styles.playSteps}>steps: {steps}</div>\n      <Game addStep={addStep} handleFinish={finish} />\n    </>\n  );\n}\n\nPlayBox.propTypes = {\n  steps: PropTypes.number,\n  addStep: PropTypes.func,\n  finish: PropTypes.func,\n};\n","import React from \"react\";\nimport styles from \"./WinBox.module.css\";\nimport PropTypes from \"prop-types\";\n\nexport default function WinBox({ steps, onClick }) {\n  return (\n    <section className={styles.winBox}>\n      <h2 className={styles.winHead}>Great!</h2>\n      <p className={styles.winBody}>Total steps: {steps}</p>\n      <button className={styles.winBoxBtn} onClick={onClick}>\n        Play Again\n      </button>\n    </section>\n  );\n}\n\nWinBox.propTypes = {\n  steps: PropTypes.number,\n  onClick: PropTypes.func,\n};\n","import React, { useState, useCallback } from \"react\";\nimport \"./styles/App.css\";\nimport { PlayBox, WinBox } from \"./components\";\n\nfunction App() {\n  const [steps, setSteps] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n\n  const handlePlayAgain = useCallback(() => {\n    setIsFinished(false);\n\n    setSteps(0);\n  }, []);\n\n  const handleFinish = useCallback(() => {\n    setIsFinished(true);\n  }, []);\n\n  const handleStep = useCallback(() => {\n    setSteps((prevStep) => prevStep + 1);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      {isFinished ? (\n        <WinBox steps={steps} onClick={handlePlayAgain} />\n      ) : (\n        <PlayBox steps={steps} addStep={handleStep} finish={handleFinish} />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector(\".root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}